AWSTemplateFormatVersion: '2010-09-09'
Parameters:

  AWSEC2RoleforSSM:
    Type: String
    Description: Name for the IAM role for SSM for EC2
    Default: AWSEC2RoleforSSM

  AutomationExecutionRoleName:
    Type: String
    Description: Name for the IAM role for SSM Patching Automation
    Default: AWS-SystemsManager-AutomationExecutionRole

  ExecutionPolicyName:
    Type: String
    Description: Name for the IAM policy for SSM Patching Automation
    Default: ExecutionPolicy

  MasterAccountNumber:
    Type: Number
    Description: Master account number where patching will begin

  S3BucketReportArn:
    Type: String
    Description: ARN Report storage S3 bucket on Master account

  SNSArn:
    Type: String
    Description: ARN sns

  ResourceGroup:
    Type: String
    Description: Name for the Resource Group for patching-related resources
    Default: PatchingGroup

  TagKey:
    Type: String
    Description: Tag key used for filtering resources
    Default: Stage

  TagValue:
    Type: String
    Description: Tag value used for filtering resources
    Default: ForPatching

Resources:
  
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref AWSEC2RoleforSSM
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'


  AWSSystemsManagerAutomationExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref AutomationExecutionRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:${AWS::Partition}:iam::${MasterAccountNumber}:role/Lambda-SSM-RunMultiAccountsPatching'
                - !Sub 'arn:${AWS::Partition}:iam::${MasterAccountNumber}:role/Lambda-DeleteSnapshot'
                - !Sub 'arn:${AWS::Partition}:iam::${MasterAccountNumber}:role/AWS-SystemsManager-AutomationAdministrationRole'
            Action: 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              Service: 'ssm.amazonaws.com'
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub '${AWS::AccountId}'
              ArnLike:
                aws:SourceArn: !Sub 'arn:${AWS::Partition}:ssm:*:${AWS::AccountId}:automation-execution/*'

  ExecutionPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Ref ExecutionPolicyName
      Roles:
        - !Ref AWSSystemsManagerAutomationExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'EC2'
            Effect: Allow
            Action:
              - 'ec2:CreateTags'
              - 'ec2:CreateSnapshot'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DescribeInstanceStatus'
              - 'ec2:DescribeVolumes'
              - 'ec2:DeleteSnapshot'
              - 'ec2:DescribeSnapshotAttribute'
            Resource: '*'
          - Sid: 'IAM'
            Effect: Allow
            Action:
              - 'iam:DeleteRole'
              - 'iam:GetRole'
              - 'iam:GetRolePolicy'
              - 'iam:ListAttachedRolePolicies'
              - 'iam:ListRolePolicies'
              - 'iam:CreateRole'
              - 'iam:PutRolePolicy'
              - 'iam:DeleteRolePolicy'
            Resource: '*'
          - Sid: 'PassRole'
            Effect: Allow
            Action: 'iam:PassRole'
            Resource:
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/AWS-SystemsManager-AutomationExecutionRole'
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/PatchInstanceWithRollbackStack*'
          - Sid: 'Lambda'
            Effect: Allow
            Action:
              - 'lambda:DeleteFunction'
              - 'lambda:GetFunction'
              - 'lambda:GetRuntimeManagementConfig'
              - 'lambda:CreateFunction'
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionCodeSigningConfig'
            Resource: '*'
          - Sid: 'SSM'
            Effect: Allow
            Action:
              - 'ssm:SendCommand'
              - 'ssm:DescribeInstanceInformation'
              - 'ssm:ListCommands'
              - 'ssm:ListCommandInvocations'
              - 'ssm:StartAutomationExecution'
              - 'ssm:DescribeAutomationExecutions'
              - 'ssm:GetAutomationExecution'
              - 'ssm:DescribeAutomationStepExecutions'
            Resource: '*'
          - Sid: 'SNS'
            Effect: Allow
            Action:
              - 'sns:Publish'
            Resource: !Ref SNSArn
          - Sid: 'CloudFormation'
            Effect: Allow
            Action:
              - 'cloudformation:CreateStack'
              - 'cloudformation:DeleteStack'
              - 'cloudformation:DescribeStacks'
            Resource: '*'
          - Sid: 'S3'
            Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !Sub '${S3BucketReportArn}/*' 
          - Sid: 'ResourceGroupTaggingAPI'
            Effect: Allow
            Action:
              - 'tag:GetResources'
            Resource: '*'
          - Sid: 'AWSResourceGroups'
            Effect: Allow
            Action:
              - 'resource-groups:ListGroupResources'
            Resource: '*'

  PatchingGroupResource:
    Type: 'AWS::ResourceGroups::Group'
    Properties:
      Name: !Ref ResourceGroup
      Description: 'Resource Group for patching-related resources'
      ResourceQuery:
        Type: 'TAG_FILTERS_1_0'
        Query:
          ResourceTypeFilters:
            - 'AWS::EC2::Instance'
          TagFilters:
            - Key: !Ref TagKey
              Values:
                - !Ref TagValue